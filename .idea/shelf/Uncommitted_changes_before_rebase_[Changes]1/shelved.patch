Index: src/ui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\n# pip install pygame\nimport pygame\nimport time\nfrom PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QLabel, QFrame, QLineEdit, QPushButton, QVBoxLayout, \\\n    QHBoxLayout, QMenuBar, QMenu, QSplashScreen, QMessageBox, QInputDialog, QGridLayout, QDialog\nfrom PyQt6.QtCore import Qt, QSize\nfrom PyQt6.QtGui import QPixmap, QFont, QKeyEvent\n\n\napp = QApplication(sys.argv)\nclass MainWindow(QMainWindow):\n    def __init__(self, backend):\n        super().__init__()\n        # allows calls Database from self.main.database & UDP_Server calls from self.main.udp_server\n        self.main = backend\n        self.setWindowTitle(\"Photon | Team 16\")\n        self.setStyleSheet(\"background-color: rgb(0, 0, 0);\")\n        self.setupUI()\n        self.setMinimumSize(800, 600)\n\n    def setupUI(self):\n        self.centralwidget = QWidget(self)\n        self.setCentralWidget(self.centralwidget)\n\n        # Sets up outer layout... Superimposes the buttons ontop of the player entry layout\n        # mainLayout = QVBoxLayout(self.centralwidget)\n\n        # Sets up Player entry (inner) layout\n        playerEntryLayout = QHBoxLayout(self.centralwidget)\n\n        # Sets left background then superimposes Red Team's Layout\n        self.frame = QFrame()  # frame is the leftmost red background picture\n        self.frame.setStyleSheet(\n            \"background-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, stop:0 rgba(120, 0, 0, 255), stop:1 rgba(0, 0, 0, 255));\")\n        self.frame.setContentsMargins(20, 0, 100, 0)  # To compensate for the table margins (Left, Up, Right, Down)\n\n        redTeamLayout = self.setupRedTeam()\n        self.frame.setLayout(redTeamLayout)\n\n        # Sets right background then superimposes Green Team's Layout\n        self.frame_2 = QFrame()  # frame_2 is the rightmost green background picture\n        self.frame_2.setStyleSheet(\n            \"background-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.495074, fy:0.494, stop:0 rgba(0, 107, 24, 255), stop:1 rgba(0, 0, 0, 255));\")\n        self.frame_2.setContentsMargins(100, 0, 20, 0)  # To compensate for the table margins (Left, Up, Right, Down)\n\n        greenTeamLayout = self.setupGreenTeam()\n        self.frame_2.setLayout(greenTeamLayout)\n\n        # Adds Background + Team Layouts\n        playerEntryLayout.addWidget(self.frame, 1)\n        playerEntryLayout.addWidget(self.frame_2, 1)\n\n        self.menubar = QMenuBar(self)\n        self.setMenuBar(self.menubar)\n\n        self.menuPhoton = QMenu(self.menubar)\n        self.menuPhoton.setTitle(\"Photon\")\n\n        self.menuTeam_16 = QMenu(self.menubar)\n        self.menuTeam_16.setTitle(\"Team 16\")\n\n        self.menubar.addAction(self.menuPhoton.menuAction())\n        self.menubar.addAction(self.menuTeam_16.menuAction())\n\n        self.startGameButton = QPushButton(\"Start Game\")\n        self.startGameButton.setStyleSheet(\"border: 1px solid white; border-radius: 15px; color: white;\")\n        self.startGameButton.setFixedSize(100, 20)\n        playerEntryLayout.addWidget(self.startGameButton)\n        self.startGameButton.clicked.connect(self.gameActionUI)\n        self.setStatusBar(None)\n\n        self.deleteGameButton = QPushButton(\"Delete Game\")\n        self.deleteGameButton.setStyleSheet(\"border: 1px solid white; border-radius: 15px; color: white;\")\n        self.deleteGameButton.setFixedSize(100, 20)\n        playerEntryLayout.addWidget(self.deleteGameButton)\n        self.deleteGameButton.clicked.connect(self.delete_all_players)\n        self.setStatusBar(None)\n\n    def keyPressEvent(self, event: QKeyEvent):\n        if event.key() == Qt.Key.Key_F5:\n            self.gameActionUI()\n        elif event.key() == Qt.Key.Key_F12:\n            self.delete_all_players()\n\n    def delete_all_players(self):\n       self.clear_player_entries() \n\n    def clear_player_entries(self):\n        # Implement logic to clear player entries from the UI\n        # For example:\n        for id_input, codename_input, equipment_id_input in self.players_red:\n            id_input.clear()\n            codename_input.clear()\n            equipment_id_input.clear()\n\n        for id_input, codename_input, equipment_id_input in self.players_green:\n            id_input.clear()\n            codename_input.clear()\n            equipment_id_input.clear() \n       \n           \n    def gameActionUI(self):\n        self.setVisible(False)\n        self.countdown()\n        self.setVisible(True)\n         # Clear the current central widget\n        self.takeCentralWidget()\n        \n        # Create a new central widget for the game action screen\n        self.centralwidget = QWidget()\n        self.setCentralWidget(self.centralwidget)\n\n        gameActionLayout = QVBoxLayout(self.centralwidget)\n        killFeedLayout = QHBoxLayout(self.centralwidget)\n        scoreLayout = QHBoxLayout()\n        \n        self.killFeedBackground = QFrame()   #frame is the leftmost red background picture\n        self.killFeedBackground.setStyleSheet(\"background-color: blue;\")\n        self.killFeedBackground.setContentsMargins(0, 20, 0, 20) # To compensate for the table margins (Left, Up, Right, Down)\n        \n        self.redScoreBackground = QFrame()   #frame is the leftmost red background picture\n        self.redScoreBackground.setStyleSheet(\"background-color: black;\")\n        self.redScoreBackground.setContentsMargins(0, 0, 0, 0) # To compensate for the table margins (Left, Up, Right, Down)\n        \n        self.greenScoreBackground = QFrame()   #frame is the leftmost red background picture\n        self.greenScoreBackground.setStyleSheet(\"background-color: black;\")\n        self.greenScoreBackground.setContentsMargins(0, 0, 0, 0) # To compensate for the table margins (Left, Up, Right, Down)\n        \n        redScoreLayout = self.setupRedScoreLayout()\n        greenScoreLayout = self.setupGreenScoreLayout()\n        killFeedLayout = self.setupKillFeedLayout()\n\n        self.killFeedBackground.setLayout(killFeedLayout)\n        self.redScoreBackground.setLayout(redScoreLayout)\n        self.greenScoreBackground.setLayout(greenScoreLayout)\n\n        scoreLayout.addWidget(self.redScoreBackground)\n        scoreLayout.addWidget(self.greenScoreBackground)\n\n        gameActionLayout.addLayout(scoreLayout)\n        gameActionLayout.addWidget(self.killFeedBackground)\n\n\n\n    def setupRedScoreLayout(self):\n        #####RED#####\n        redTeamLayout = QGridLayout()\n\n        font = QFont(\"Arial\", 10, QFont.Weight.Bold)\n        userFont = QFont(\"Arial\", 8)\n        titleFont = QFont(\"Arial\", 14, QFont.Weight.Bold)\n        # Red Team User IDs\n        self.redUserID = QLabel(\"UserID\")\n        self.redUserID.setFont(font)\n        self.redUserID.setStyleSheet(\"color: red; background-color: transparent;\")\n        self.teamTitle = QLabel(\"RED TEAM\")\n        self.teamTitle.setFont(titleFont)\n        self.teamTitle.setStyleSheet(\"color: red; background-color: transparent;\")\n\n        # Red Team Score\n        self.redScore = QLabel(\"Score\")\n        self.redScore.setFont(font)\n        self.redScore.setStyleSheet(\"color: red; background-color: transparent;\") \n\n        self.testUser = QLabel(\"Test User\")\n        self.testUser.setFont(userFont)\n        self.testUser.setStyleSheet(\"color: red; background-color: transparent;\")\n\n        self.testScore = QLabel(\"Test Score\")\n        self.testScore.setFont(userFont)\n        self.testScore.setStyleSheet(\"color: red; background-color: transparent;\")\n\n        for i in range(1,10):\n            for j in range(1,10):\n                redTeamLayout.addWidget(QLabel(\" \"),i,j)\n\n        self.redUserID.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.teamTitle.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.redScore.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.testUser.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.testScore.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        redTeamLayout.addWidget(self.redUserID, 1, 2)\n        redTeamLayout.addWidget(self.teamTitle, 0, 5)\n        redTeamLayout.addWidget(self.redScore, 1, 8)\n        redTeamLayout.addWidget(self.testUser, 2, 2)\n        redTeamLayout.addWidget(self.testScore, 2, 8)\n        #redTeamLayout.addWidget(self.initializeGrid, 9, 14)\n        #redTeamVerLayout.addWidget(self.teamTitle)\n\n        return redTeamLayout\n\n    ######GREEN######\n    def setupGreenScoreLayout(self):\n        #####green#####\n        greenTeamLayout = QGridLayout()\n\n        font = QFont(\"Arial\", 10, QFont.Weight.Bold)\n        userFont = QFont(\"Arial\", 8)\n        titleFont = QFont(\"Arial\", 14, QFont.Weight.Bold)\n        # green Team User IDs\n        self.greenUserID = QLabel(\"UserID\")\n        self.greenUserID.setFont(font)\n        self.greenUserID.setStyleSheet(\"color: green; background-color: transparent;\")\n        self.greenteamTitle = QLabel(\"GREEN TEAM\")\n        self.greenteamTitle.setFont(titleFont)\n        self.greenteamTitle.setStyleSheet(\"color: green; background-color: transparent;\")\n\n        # green Team Score\n        self.greenScore = QLabel(\"Score\")\n        self.greenScore.setFont(font)\n        self.greenScore.setStyleSheet(\"color: green; background-color: transparent;\") \n\n        self.greentestUser = QLabel(\"Test User\")\n        self.greentestUser.setFont(userFont)\n        self.greentestUser.setStyleSheet(\"color: green; background-color: transparent;\")\n\n        self.greentestScore = QLabel(\"Test Score\")\n        self.greentestScore.setFont(userFont)\n        self.greentestScore.setStyleSheet(\"color: green; background-color: transparent;\")\n\n        for i in range(1,10):\n            for j in range(1,10):\n                greenTeamLayout.addWidget(QLabel(\" \"),i,j)\n\n        self.greenUserID.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.greenteamTitle.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.greenScore.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.greentestUser.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.greentestScore.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        greenTeamLayout.addWidget(self.greenUserID, 1, 2)\n        greenTeamLayout.addWidget(self.greenteamTitle, 0, 5)\n        greenTeamLayout.addWidget(self.greenScore, 1, 8)\n        greenTeamLayout.addWidget(self.greentestUser, 2, 2)\n        greenTeamLayout.addWidget(self.greentestScore, 2, 8)\n        #greenTeamLayout.addWidget(self.initializeGrid, 9, 14)\n        #greenTeamVerLayout.addWidget(self.teamTitle)\n        return greenTeamLayout\n\n    def setupKillFeedLayout(self):\n\n        killfeedVerLayout = QVBoxLayout()\n        killfeedHorLayout = QHBoxLayout()\n\n        killfeedHorLayout.setContentsMargins(20, 0, 70, 0)  # Margin spacers: (Left, Up, Right, Down)\n        killfeedHorLayout.addStretch(1)\n\n        killfeedVerLayout.addLayout(killfeedHorLayout)\n\n        # print(\"HiFeed\")\n        return killfeedVerLayout\n\n    def setupRedTeam(self):\n        # Red Team Layout\n        redTeamVerLayout = QVBoxLayout()\n        redTeamHeaderLayout = QHBoxLayout()\n\n        redTeamVerLayout.setContentsMargins(70, 0, 20, 0)  # Margin spacers: (Left, Up, Right, Down)\n        redTeamVerLayout.addStretch(1)\n\n        self.red_team_label = QLabel(\"RED TEAM\")\n        self.red_team_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.red_team_label.setStyleSheet(\"color: white; background-color: transparent;\")\n\n        redTeamVerLayout.addWidget(self.red_team_label)\n\n        # Red Team Headers\n        self.red_id_header = QLabel(\"ID\")\n        self.red_id_header.setFixedWidth(50)\n        self.red_id_header.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.red_id_header.setStyleSheet(\"color: white; background-color: transparent;\")\n        # self.red_id_header.setSizePolicy(QSizePolicy.expandingDirections, 0)\n\n        self.red_codename_header = QLabel(\"Codename\")\n        self.red_codename_header.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.red_codename_header.setStyleSheet(\"color: white; background-color: transparent;\")\n        # self.red_codename_header.setSizePolicy(QSizePolicy.expandingDirections, 0)\n\n        self.red_eqid_header = QLabel(\"Eq. ID\")\n        self.red_eqid_header.setFixedWidth(50)\n        self.red_eqid_header.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.red_eqid_header.setStyleSheet(\"color: white; background-color: transparent;\")\n\n        # Adds headers to the header layout\n        redTeamHeaderLayout.addWidget(self.red_id_header)\n        redTeamHeaderLayout.addStretch(1)\n        redTeamHeaderLayout.addWidget(self.red_codename_header)\n        redTeamHeaderLayout.addStretch(1)\n        redTeamHeaderLayout.addWidget(self.red_eqid_header)\n\n        # Add the header layout to the team layout\n        redTeamVerLayout.addLayout(redTeamHeaderLayout)\n\n        self.players_red = []\n\n        # this for loop creates the tables for red team\n        for i in range(15):\n            playerLayout = QHBoxLayout()\n\n            # Create the player number label\n            player_number = QLabel(str(i + 1))\n            player_number.setStyleSheet(\"color: white; background-color: transparent;\")\n            player_number.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)\n            player_number.setFixedWidth(\n                30)  # This need to be here to ensure numbers past 10 don't push the boxes to the right\n\n            id_input = QLineEdit()\n            id_input.setStyleSheet(\n                \"color: white; background-color: black; border: 1px solid white; border-radius: 7px;\")\n\n            codename_input = QLineEdit()\n            codename_input.setStyleSheet(\n                \"color: white; background-color: black; border: 1px solid white; border-radius: 7px;\")\n\n            equipment_id_input = QLineEdit()\n            equipment_id_input.setStyleSheet(\n                \"color: white; background-color: black; border: 1px solid white; border-radius: 7px;\")\n\n            # Add input fields to the player layout. The 2nd parameters are the stretch factors to size the boxes properly.\n            playerLayout.addWidget(player_number)\n            playerLayout.addWidget(id_input, 1)\n            playerLayout.addWidget(codename_input, 3)\n            playerLayout.addWidget(equipment_id_input, 1)\n\n            # Add the player layout to the team layout\n            redTeamVerLayout.addLayout(playerLayout)\n\n            # redTeamVerLayout.addStretch(1)\n            self.players_red.append((id_input, codename_input, equipment_id_input))\n\n        # Create save button\n        self.save_button = QPushButton(\"Save\")\n        self.save_button.setStyleSheet(\"border: 1px solid white; border-radius: 15px; color: white;\")\n        self.save_button.setFixedSize(50, 20)\n        self.save_button.clicked.connect(lambda: self.save_players_ui(\"red\"))\n\n        redTeamVerLayout.addWidget(self.save_button)\n        redTeamVerLayout.addStretch(1)\n\n        return redTeamVerLayout\n\n    def setupGreenTeam(self):\n        # Green Team Layout\n        greenTeamVerLayout = QVBoxLayout()\n        greenTeamHeaderLayout = QHBoxLayout()\n\n        greenTeamVerLayout.setContentsMargins(20, 0, 70, 0)  # Margin spacers: (Left, Up, Right, Downn)\n        greenTeamVerLayout.addStretch(1)\n\n        self.green_team_label = QLabel(\"GREEN TEAM\")\n        self.green_team_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.green_team_label.setStyleSheet(\"color: white; background-color: transparent;\")\n        greenTeamVerLayout.addWidget(self.green_team_label)\n\n        # Green Team Headers\n        self.green_id_header = QLabel(\"ID\")\n        self.green_id_header.setFixedWidth(50)\n        self.green_id_header.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.green_id_header.setStyleSheet(\"color: white; background-color: transparent;\")\n\n        self.green_codename_header = QLabel(\"Codename\")\n        self.green_codename_header.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.green_codename_header.setStyleSheet(\"color: white; background-color: transparent;\")\n\n        self.green_eqid_header = QLabel(\"Eq. ID\")\n        self.green_eqid_header.setFixedWidth(50)\n        self.green_eqid_header.setAlignment(Qt.AlignmentFlag.AlignCenter)\n        self.green_eqid_header.setStyleSheet(\"color: white; background-color: transparent;\")\n\n        # Adds headers to the header layout\n        greenTeamHeaderLayout.addWidget(self.green_id_header)\n        greenTeamHeaderLayout.addStretch(1)\n        greenTeamHeaderLayout.addWidget(self.green_codename_header)\n        greenTeamHeaderLayout.addStretch(1)\n        greenTeamHeaderLayout.addWidget(self.green_eqid_header)\n\n        # Add the header layout to the team layout\n        greenTeamVerLayout.addLayout(greenTeamHeaderLayout)\n\n        # this for loop creates the tables for green team\n        self.players_green = []\n        for i in range(15):\n            playerLayout = QHBoxLayout()\n\n            # Create the player number label\n            player_number = QLabel(str(i + 1))\n            player_number.setStyleSheet(\"color: white; background-color: transparent;\")\n            player_number.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)\n            player_number.setFixedWidth(\n                30)  # This need to be here to ensure numbers past 10 don't push the boxes to the right\n\n            id_input = QLineEdit()\n            id_input.setStyleSheet(\n                \"color: white; background-color: black; border: 1px solid white; border-radius: 7px;\")\n\n            codename_input = QLineEdit()\n            codename_input.setStyleSheet(\n                \"color: white; background-color: black; border: 1px solid white; border-radius: 7px;\")\n\n            equipment_id_input = QLineEdit()\n            equipment_id_input.setStyleSheet(\n                \"color: white; background-color: black; border: 1px solid white; border-radius: 7px;\")\n\n            # Add input fields to the player layout. The 2nd parameters are the stretch factors to size the boxes properly.\n            playerLayout.addWidget(player_number)\n            playerLayout.addWidget(id_input, 1)\n            playerLayout.addWidget(codename_input, 3)\n            playerLayout.addWidget(equipment_id_input, 1)\n\n            # Add the player layout to the team layout\n            greenTeamVerLayout.addLayout(playerLayout)\n\n            self.players_green.append((id_input, codename_input, equipment_id_input))\n\n        # Create save button\n        self.save_button = QPushButton(\"Save\")\n        self.save_button.setStyleSheet(\"border: 1px solid white; border-radius: 15px; color: white;\")\n        self.save_button.setFixedSize(50, 20)\n        self.save_button.clicked.connect(lambda: self.save_players_ui(\"green\"))\n\n        greenTeamVerLayout.addWidget(self.save_button)\n        greenTeamVerLayout.addStretch(1)\n\n        return greenTeamVerLayout\n\n    def prompt_player_id(self):\n        player_id, ok = QLineEdit.getText(\"Player ID Prompt\", \"Enter Player ID:\")\n        if ok:\n            # Logic to handle the player ID input\n            try:\n                player_id = int(player_id)\n                # Continue with the logic after getting the player ID input\n            except ValueError:\n                QMessageBox.warning(self, \"Invalid Input\", \"Please enter a valid Player ID (integer).\")\n\n    def prompt_equipment_id(self):\n       def prompt_equipment_id(self):\n        equipment_id, ok = QLineEdit.getText(\"Equipment ID Prompt\", \"Enter Equipment ID:\")\n        if ok:\n            # Logic to handle the equipment ID input\n            try:\n                equipment_id = int(equipment_id)\n                # Perform further actions with the equipment ID as needed\n            except ValueError:\n                QMessageBox.warning(self, \"Invalid Input\", \"Please enter a valid Equipment ID (integer).\")\n        pass\n\n    def countdown(self):\n        #Show countdown images\n        pygame.init()\n        # set pygame display size\n        splash_display = pygame.display.set_mode((1000, 700))  # width height\n        # set splashscreen image and scale to window\n        pygame.display.set_caption('Photon Tag - Team 16')\n        for i in range(30, -1, -1):\n            filename = 'assets/splashscreen_game_sounds/countdown_images/{}.tif'.format(i)\n            countdown_img = pygame.image.load(filename)\n            countdown_img = pygame.transform.scale(countdown_img, (1000, 700))\n            # display splashscreen\n            splash_display.blit(countdown_img, (0, 0))\n            pygame.display.update()\n            # show for 3 seconds then close splashscreen\n            time.sleep(1)\n        pygame.quit()\n        return 1\n\n    def save_players_ui(self, team_color):\n    # Convert input data to active Player objects and store them in backend lists\n        try:\n            # Handle red team players\n            if team_color == \"red\":\n                for id_input, codename_input, equipment_id_input in self.players_red:\n                    player_id_text = id_input.text().strip()\n                    # Check if player ID is provided\n                    if player_id_text:\n                        try:\n                            # Perform Supabase search using player ID\n                            db_search = self.main.database.getPlayer(int(player_id_text))\n                            # If player is found in Supabase, prompt for codename and equipment ID\n                            if not db_search['needsAdding']:\n                                codename_input.setText(str(db_search['playerName']))\n                                equipment_id_input.setFocus()  # Set focus to equipment ID input\n                            else:\n                                # Prompt user to input codename and equipment ID using QInputDialog\n                                dialog = QInputDialog(self)\n                                dialog.setInputMode(QInputDialog.InputMode.TextInput)\n                                dialog.setLabelText(\"Enter Codename:\")\n                                dialog.setWindowTitle(\"Player Information\")\n                                dialog.setOkButtonText(\"Next\")\n                                dialog.setCancelButtonText(\"Cancel\")\n                                dialog.setStyleSheet(\"color: white;\")  # Set font color\n                                result = dialog.exec()\n                                if result == QDialog.DialogCode.Accepted:\n                                    codename = dialog.textValue()\n                                    dialog.setLabelText(\"Enter Equipment ID:\")\n                                    result = dialog.exec()\n                                    if result == QDialog.DialogCode.Accepted:\n                                        equipment_id = dialog.textValue()\n                                        codename_input.setText(codename)\n                                        equipment_id_input.setText(equipment_id)\n                                        # add player to database\n                                        self.main.database.addPlayer(int(player_id_text), codename)\n                                        # transmit equipment code\n                                        self.main.udp_server.transmit_message(equipment_id)\n                        except ValueError:\n                            print(\"Player ID must be an integer.\")\n                pass\n\n            # Handle green team players\n            elif team_color == \"green\":\n                for id_input, codename_input, equipment_id_input in self.players_green:\n                    player_id_text = id_input.text().strip()\n                    # Check if player ID is provided\n                    if player_id_text:\n                        try:\n                            # Perform Supabase search using player ID\n                            db_search = self.main.database.getPlayer(int(player_id_text))\n                            # If player is found in Supabase, prompt for codename and equipment ID\n                            if not db_search['needsAdding']:\n                                codename_input.setText(str(db_search['playerName']))\n                                equipment_id_input.setFocus()  # Set focus to equipment ID input\n                            else:\n                                # Prompt user to input codename and equipment ID using QInputDialog\n                                dialog = QInputDialog(self)\n                                dialog.setInputMode(QInputDialog.InputMode.TextInput)\n                                dialog.setLabelText(\"Enter Codename:\")\n                                dialog.setWindowTitle(\"Player Information\")\n                                dialog.setOkButtonText(\"Next\")\n                                dialog.setCancelButtonText(\"Cancel\")\n                                dialog.setStyleSheet(\"color: white;\")  # Set font color\n                                result = dialog.exec()\n                                if result == QDialog.DialogCode.Accepted:\n                                    codename = dialog.textValue()\n                                    dialog.setLabelText(\"Enter Equipment ID:\")\n                                    result = dialog.exec()\n                                    if result == QDialog.DialogCode.Accepted:\n                                        equipment_id = dialog.textValue()\n                                        codename_input.setText(codename)\n                                        equipment_id_input.setText(equipment_id)\n                                        # add player to database\n                                        self.main.database.addPlayer(int(player_id_text), codename)\n                                        # transmit equipment code\n                                        self.main.udp_server.transmit_message(equipment_id)\n                        except ValueError:\n                            print(\"Player ID must be an integer.\")\n                pass\n        except Exception as e:\n            print(\"Error occurred while saving data to Supabase:\", e)\n\n\ndef ui_start(backend):\n    # splash_pix = QPixmap('assets/splashscreen_game_sounds/logo.jpg').scaled(QSize(1000, 700), Qt.AspectRatioMode.KeepAspectRatio)\n    # splash = QSplashScreen(splash_pix)\n    # splash.show()\n    # app.processEvents()\n    # time.sleep(3)  # Display the splash screen for 3 seconds.\n    # splash.close()\n\n    # pygame for splashscreen\n    pygame.init()\n    # set pygame display size\n    splash_display = pygame.display.set_mode((1000, 700))  # width height\n    # set splashscreen image and scale to window\n    splash_img = pygame.image.load('assets/splashscreen_game_sounds/logo.jpg')\n    splash_img = pygame.transform.scale(splash_img, (1000, 700))\n    # display splashscreen\n    splash_display.blit(splash_img, (0, 0))\n    pygame.display.set_caption('Photon Tag - Team 16')\n    pygame.display.update()\n    # show for 3 seconds then close splashscreen\n    time.sleep(3)\n    pygame.quit()\n\n    mainWindow = MainWindow(backend)\n    mainWindow.resize(1000, 700)\n    mainWindow.show()\n    sys.exit(app.exec())\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ui.py b/src/ui.py
--- a/src/ui.py	(revision 0d5bf17bbdede48ba8e9888c3c7bd96d5f5c9ff8)
+++ b/src/ui.py	(date 1711730517909)
@@ -5,7 +5,8 @@
 from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QLabel, QFrame, QLineEdit, QPushButton, QVBoxLayout, \
     QHBoxLayout, QMenuBar, QMenu, QSplashScreen, QMessageBox, QInputDialog, QGridLayout, QDialog
 from PyQt6.QtCore import Qt, QSize
-from PyQt6.QtGui import QPixmap, QFont, QKeyEvent
+from PyQt6.QtGui import QPixmap, QFont
+from PyQt6.QtGui import QKeyEvent
 
 
 app = QApplication(sys.argv)
@@ -97,16 +98,12 @@
         for id_input, codename_input, equipment_id_input in self.players_green:
             id_input.clear()
             codename_input.clear()
-            equipment_id_input.clear() 
-       
-           
+            equipment_id_input.clear()
+
     def gameActionUI(self):
-        self.setVisible(False)
-        self.countdown()
-        self.setVisible(True)
-         # Clear the current central widget
+        # Clear the current central widget
         self.takeCentralWidget()
-        
+
         # Create a new central widget for the game action screen
         self.centralwidget = QWidget()
         self.setCentralWidget(self.centralwidget)
@@ -114,19 +111,22 @@
         gameActionLayout = QVBoxLayout(self.centralwidget)
         killFeedLayout = QHBoxLayout(self.centralwidget)
         scoreLayout = QHBoxLayout()
-        
-        self.killFeedBackground = QFrame()   #frame is the leftmost red background picture
+
+        self.killFeedBackground = QFrame()  # frame is the leftmost red background picture
         self.killFeedBackground.setStyleSheet("background-color: blue;")
-        self.killFeedBackground.setContentsMargins(0, 20, 0, 20) # To compensate for the table margins (Left, Up, Right, Down)
-        
-        self.redScoreBackground = QFrame()   #frame is the leftmost red background picture
+        self.killFeedBackground.setContentsMargins(0, 20, 0,
+                                                   20)  # To compensate for the table margins (Left, Up, Right, Down)
+
+        self.redScoreBackground = QFrame()  # frame is the leftmost red background picture
         self.redScoreBackground.setStyleSheet("background-color: black;")
-        self.redScoreBackground.setContentsMargins(0, 0, 0, 0) # To compensate for the table margins (Left, Up, Right, Down)
-        
-        self.greenScoreBackground = QFrame()   #frame is the leftmost red background picture
+        self.redScoreBackground.setContentsMargins(0, 0, 0,
+                                                   0)  # To compensate for the table margins (Left, Up, Right, Down)
+
+        self.greenScoreBackground = QFrame()  # frame is the leftmost red background picture
         self.greenScoreBackground.setStyleSheet("background-color: black;")
-        self.greenScoreBackground.setContentsMargins(0, 0, 0, 0) # To compensate for the table margins (Left, Up, Right, Down)
-        
+        self.greenScoreBackground.setContentsMargins(0, 0, 0,
+                                                     0)  # To compensate for the table margins (Left, Up, Right, Down)
+
         redScoreLayout = self.setupRedScoreLayout()
         greenScoreLayout = self.setupGreenScoreLayout()
         killFeedLayout = self.setupKillFeedLayout()
@@ -141,8 +141,6 @@
         gameActionLayout.addLayout(scoreLayout)
         gameActionLayout.addWidget(self.killFeedBackground)
 
-
-
     def setupRedScoreLayout(self):
         #####RED#####
         redTeamLayout = QGridLayout()
@@ -161,8 +159,7 @@
         # Red Team Score
         self.redScore = QLabel("Score")
         self.redScore.setFont(font)
-        self.redScore.setStyleSheet("color: red; background-color: transparent;") 
-
+        self.redScore.setStyleSheet("color: red; background-color: transparent;")
         self.testUser = QLabel("Test User")
         self.testUser.setFont(userFont)
         self.testUser.setStyleSheet("color: red; background-color: transparent;")
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"09a4d977-1fb3-4e0c-8d1e-fa3ab21e37ca\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/src/ui.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/ui.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"PUSH_TAGS\">\n      <GitPushTagMode>\n        <option name=\"argument\" value=\"--tags\" />\n        <option name=\"title\" value=\"All\" />\n      </GitPushTagMode>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 6\n}</component>\n  <component name=\"ProjectId\" id=\"2cMpy7JTPgf6sy2hNl1jj5ccWoW\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Python.main.executor\": \"Run\",\n    \"Python.ui.executor\": \"Run\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"sankalp-patch-1\",\n    \"last_opened_file_path\": \"/Users/sanpandey/Software Engineering/laserTagProject/Software-Engineering-Spring-2024\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"settings.editor.selected.configurable\": \"project.propVCSSupport.DirectoryMappings\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src\" />\n      <recent name=\"$PROJECT_DIR$/assets/sounds\" />\n      <recent name=\"$PROJECT_DIR$/assets\" />\n      <recent name=\"$PROJECT_DIR$/assets/img\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-d68999036c7f-b11f5e8da5ad-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.14475.56\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"09a4d977-1fb3-4e0c-8d1e-fa3ab21e37ca\" name=\"Changes\" comment=\"\" />\n      <created>1707931554068</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1707931554068</updated>\n      <workItem from=\"1707931555566\" duration=\"845000\" />\n      <workItem from=\"1708022365143\" duration=\"1824000\" />\n      <workItem from=\"1708027031686\" duration=\"2912000\" />\n      <workItem from=\"1708045362880\" duration=\"57000\" />\n      <workItem from=\"1708106654258\" duration=\"902000\" />\n      <workItem from=\"1708541100099\" duration=\"63000\" />\n      <workItem from=\"1708717553577\" duration=\"1631000\" />\n      <workItem from=\"1710263861748\" duration=\"687000\" />\n      <workItem from=\"1710272422871\" duration=\"557000\" />\n      <workItem from=\"1710431116162\" duration=\"8335000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <ignored-roots>\n      <path value=\"$PROJECT_DIR$/src\" />\n      <path value=\"$PROJECT_DIR$/../..\" />\n    </ignored-roots>\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/Software_Engineering_Spring_2024$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1710648463314\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Software_Engineering_Spring_2024$ui.coverage\" NAME=\"ui Coverage Results\" MODIFIED=\"1710648283649\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/src\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0d5bf17bbdede48ba8e9888c3c7bd96d5f5c9ff8)
+++ b/.idea/workspace.xml	(date 1711730517909)
@@ -5,6 +5,7 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="09a4d977-1fb3-4e0c-8d1e-fa3ab21e37ca" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/ui.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/ui.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -40,14 +41,14 @@
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "sankalp-patch-1",
+    "git-widget-placeholder": "sankalpp-sprint3",
     "last_opened_file_path": "/Users/sanpandey/Software Engineering/laserTagProject/Software-Engineering-Spring-2024",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
     "node.js.selected.package.tslint": "(autodetect)",
     "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "project.propVCSSupport.DirectoryMappings",
+    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable",
     "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
@@ -83,7 +84,9 @@
       <workItem from="1708717553577" duration="1631000" />
       <workItem from="1710263861748" duration="687000" />
       <workItem from="1710272422871" duration="557000" />
-      <workItem from="1710431116162" duration="8335000" />
+      <workItem from="1710431116162" duration="9892000" />
+      <workItem from="1710697895495" duration="123000" />
+      <workItem from="1710698025284" duration="1395000" />
     </task>
     <servers />
   </component>
@@ -98,7 +101,7 @@
     <option name="LAST_COMMIT_MESSAGE" value="" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/Software_Engineering_Spring_2024$main.coverage" NAME="main Coverage Results" MODIFIED="1710648463314" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Software_Engineering_Spring_2024$ui.coverage" NAME="ui Coverage Results" MODIFIED="1710648283649" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
+    <SUITE FILE_PATH="coverage/Software_Engineering_Spring_2024$main.coverage" NAME="main Coverage Results" MODIFIED="1710698869268" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Software_Engineering_Spring_2024$ui.coverage" NAME="ui Coverage Results" MODIFIED="1710698866294" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src" />
   </component>
 </project>
\ No newline at end of file
